{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { toast } from \"react-toastify\";\nconst initialState = {\n  //intial state of cart\n  cartItems: localStorage.getItem(\"cartItems\") ? JSON.parse(localStorage.getItem(\"cartItems\")) //cartitems is the key\n  : [],\n  //local storage for saving cart when refreshed.\n  cartTotalQuantity: 0,\n  cartTotalAmount: 0\n};\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState,\n  reducers: {\n    addToCart(state, action) {\n      const itemIndex = state.cartItems.findIndex(item => item.id === action.payload.id); //using find index, an array method, to chevk if the item we are trying to add is already in the cart, compare id's\n\n      if (itemIndex >= 0) {\n        //incase item is already in cart, condition ^\n        state.cartItems[itemIndex].cartQuantity += 1;\n        toast.info(`Increased ${state.cartItems[itemIndex].name} Quantity`, {\n          position: \"bottom-center\"\n        });\n      } else {\n        const tempProduct = { ...action.payload,\n          cartQuantity: 1\n        };\n        state.cartItems.push(tempProduct);\n        toast.success(`${action.payload.name} Added to Cart`, {\n          position: \"bottom-center\"\n        });\n      }\n\n      localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n    },\n\n    removeFromCart(state, action) {\n      const nextCartItems = state.cartItems.filter(cartItem => cartItem.id !== action.payload.id);\n      state.cartItems = nextCartItems;\n    }\n\n  }\n});\nexport const {\n  addToCart,\n  removeFromCart\n} = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"names":["createSlice","toast","initialState","cartItems","localStorage","getItem","JSON","parse","cartTotalQuantity","cartTotalAmount","cartSlice","name","reducers","addToCart","state","action","itemIndex","findIndex","item","id","payload","cartQuantity","info","position","tempProduct","push","success","setItem","stringify","removeFromCart","nextCartItems","filter","cartItem","actions","reducer"],"sources":["/Users/lilosivert/Downloads/Code/React-Development/Online-Shop/Front-End/src/features/cartSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { toast } from \"react-toastify\";\n\nconst initialState ={ //intial state of cart\n    cartItems: localStorage.getItem(\"cartItems\") ? JSON.parse(localStorage.getItem(\"cartItems\"))  //cartitems is the key\n    : [], //local storage for saving cart when refreshed.\n    cartTotalQuantity: 0,\n    cartTotalAmount: 0\n};\n\nconst cartSlice = createSlice({\n    name: \"cart\",\n    initialState,\n    reducers: {\n        addToCart(state, action){\n            const itemIndex = state.cartItems.findIndex( \n                (item) => item.id === action.payload.id\n            ); //using find index, an array method, to chevk if the item we are trying to add is already in the cart, compare id's\n            if(itemIndex >= 0){ //incase item is already in cart, condition ^\n                state.cartItems[itemIndex].cartQuantity += 1;\n                toast.info(`Increased ${state.cartItems[itemIndex].name} Quantity`, {\n                    position: \"bottom-center\",\n                })\n            }\n            else {\n                const tempProduct = {...action.payload, cartQuantity: 1 };\n                state.cartItems.push(tempProduct);\n                toast.success(`${action.payload.name} Added to Cart`, {\n                    position: \"bottom-center\",\n                });\n            }\n            localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n        },\n        removeFromCart(state, action){\n            const nextCartItems = state.cartItems.filter(\n                cartItem => cartItem.id !== action.payload.id \n            )\n\n            state.cartItems = nextCartItems\n        },\n    },\n});\n\nexport const { addToCart, removeFromCart } = cartSlice.actions;\nexport default cartSlice.reducer;"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,KAAT,QAAsB,gBAAtB;AAEA,MAAMC,YAAY,GAAE;EAAE;EAClBC,SAAS,EAAEC,YAAY,CAACC,OAAb,CAAqB,WAArB,IAAoCC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAX,CAApC,CAAmF;EAAnF,EACT,EAFc;EAEV;EACNG,iBAAiB,EAAE,CAHH;EAIhBC,eAAe,EAAE;AAJD,CAApB;AAOA,MAAMC,SAAS,GAAGV,WAAW,CAAC;EAC1BW,IAAI,EAAE,MADoB;EAE1BT,YAF0B;EAG1BU,QAAQ,EAAE;IACNC,SAAS,CAACC,KAAD,EAAQC,MAAR,EAAe;MACpB,MAAMC,SAAS,GAAGF,KAAK,CAACX,SAAN,CAAgBc,SAAhB,CACbC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYJ,MAAM,CAACK,OAAP,CAAeD,EADvB,CAAlB,CADoB,CAGjB;;MACH,IAAGH,SAAS,IAAI,CAAhB,EAAkB;QAAE;QAChBF,KAAK,CAACX,SAAN,CAAgBa,SAAhB,EAA2BK,YAA3B,IAA2C,CAA3C;QACApB,KAAK,CAACqB,IAAN,CAAY,aAAYR,KAAK,CAACX,SAAN,CAAgBa,SAAhB,EAA2BL,IAAK,WAAxD,EAAoE;UAChEY,QAAQ,EAAE;QADsD,CAApE;MAGH,CALD,MAMK;QACD,MAAMC,WAAW,GAAG,EAAC,GAAGT,MAAM,CAACK,OAAX;UAAoBC,YAAY,EAAE;QAAlC,CAApB;QACAP,KAAK,CAACX,SAAN,CAAgBsB,IAAhB,CAAqBD,WAArB;QACAvB,KAAK,CAACyB,OAAN,CAAe,GAAEX,MAAM,CAACK,OAAP,CAAeT,IAAK,gBAArC,EAAsD;UAClDY,QAAQ,EAAE;QADwC,CAAtD;MAGH;;MACDnB,YAAY,CAACuB,OAAb,CAAqB,WAArB,EAAkCrB,IAAI,CAACsB,SAAL,CAAed,KAAK,CAACX,SAArB,CAAlC;IACH,CAnBK;;IAoBN0B,cAAc,CAACf,KAAD,EAAQC,MAAR,EAAe;MACzB,MAAMe,aAAa,GAAGhB,KAAK,CAACX,SAAN,CAAgB4B,MAAhB,CAClBC,QAAQ,IAAIA,QAAQ,CAACb,EAAT,KAAgBJ,MAAM,CAACK,OAAP,CAAeD,EADzB,CAAtB;MAIAL,KAAK,CAACX,SAAN,GAAkB2B,aAAlB;IACH;;EA1BK;AAHgB,CAAD,CAA7B;AAiCA,OAAO,MAAM;EAAEjB,SAAF;EAAagB;AAAb,IAAgCnB,SAAS,CAACuB,OAAhD;AACP,eAAevB,SAAS,CAACwB,OAAzB"},"metadata":{},"sourceType":"module"}