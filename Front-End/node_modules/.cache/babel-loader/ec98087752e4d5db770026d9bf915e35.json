{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { url, setHeaders } from \"./api\";\nimport jwtDecode from \"jwt-decode\";\nconst initialState = {\n  token: localStorage.getItem(\"token\"),\n  //check local storage for token, buitl in JS object\n  name: \"\",\n  email: \"\",\n  _id: \"\",\n  registerStatus: \"\",\n  //pending, fullfilled, or reject\n  registerError: \"\",\n  loginStatus: \"\",\n  loginError: \"\",\n  userLoaded: false\n}; //action creator --> performs http request to backend, register user, get back token, then should be avaialble to action.payload, in case error you also add to pay;oad\n\nexport const registerUser = createAsyncThunk(\"auth/registerUser\", async (values, _ref) => {\n  let {\n    rejectWithValue\n  } = _ref;\n\n  try {\n    //handle error, http request a call to backend\n    const token = await axios.post(`${url}/register`, {\n      name: values.name,\n      email: values.email,\n      password: values.password\n    });\n    localStorage.setItem(\"token\", token.data);\n    return token.data;\n  } catch (err) {\n    console.log(err.response.data);\n    return rejectWithValue(err.response.data);\n  }\n});\nexport const loginUser = createAsyncThunk(\"auth/loginUser\", //name is for dispatched action\nasync (values, _ref2) => {\n  let {\n    rejectWithValue\n  } = _ref2;\n\n  try {\n    //handle error, http request a call to backend \n    const token = await axios.post(`${url}/login`, {\n      //<-- http request \n      email: values.email,\n      password: values.password\n    });\n    localStorage.setItem(\"token\", token.data);\n    return token.data;\n  } catch (err) {\n    console.log(err.response);\n    return rejectWithValue(err.response.data);\n  }\n});\nexport const getUser = createAsyncThunk(\"auth/getUser\", async (id, _ref3) => {\n  let {\n    rejectWithValue\n  } = _ref3;\n\n  try {\n    const token = await axios.get(`${url}/user/${id}`, setHeaders());\n    localStorage.setItem(\"token\", token.data);\n    return token.data;\n  } catch (error) {\n    console.log(error.response);\n    return rejectWithValue(error.response.data);\n  }\n});\nconst authSlice = createSlice({\n  name: \"auth\",\n  initialState,\n  reducers: {\n    loadUser(state, action) {\n      const token = state.token; //state has token bc can get from local storage\n\n      if (token) {\n        const user = jwtDecode(token);\n        return { ...state,\n          token,\n          name: user.name,\n          email: user.email,\n          _id: user._id,\n          userLoaded: true\n        };\n      } else return { ...state,\n        userLoaded: true\n      };\n    },\n\n    logoutUser(state, action) {\n      localStorage.removeItem(\"token\");\n      return { ...state,\n        token: \"\",\n        name: \"\",\n        email: \"\",\n        _id: \"\",\n        registerStatus: \"\",\n        //pending, fullfilled, or reject\n        registerError: \"\",\n        loginStatus: \"\",\n        loginError: \"\",\n        userLoaded: false\n      };\n    }\n\n  },\n  //we will be creating reducer and action will automatically created by redux toolkit\n  extraReducers: builder => {\n    builder.addCase(registerUser.pending, (state, action) => {\n      return { ...state,\n        registerStatus: \"pending\"\n      };\n    });\n    builder.addCase(registerUser.fulfilled, (state, action) => {\n      if (action.payload) {\n        const user = jwtDecode(action.payload);\n        return { ...state,\n          token: action.payload,\n          name: user.name,\n          email: user.email,\n          _id: user._id,\n          registerStatus: \"success\"\n        };\n      } else return state;\n    });\n    builder.addCase(registerUser.rejected, (state, action) => {\n      return { ...state,\n        registerStatus: \"rejected\",\n        registerError: action.payload\n      };\n    });\n    builder.addCase(loginUser.pending, (state, action) => {\n      return { ...state,\n        registerStatus: \"pending\"\n      };\n    });\n    builder.addCase(loginUser.fulfilled, (state, action) => {\n      if (action.payload) {\n        const user = jwtDecode(action.payload);\n        return { ...state,\n          token: action.payload,\n          name: user.name,\n          email: user.email,\n          _id: user._id,\n          registerStatus: \"success\"\n        };\n      } else return state;\n    });\n    builder.addCase(loginUser.rejected, (state, action) => {\n      return { ...state,\n        loginStatus: \"rejected\",\n        loginError: action.payload\n      };\n    });\n    builder.addCase(getUser.pending, (state, action) => {\n      return { ...state,\n        getUserStatus: \"pending\"\n      };\n    });\n    builder.addCase(getUser.fulfilled, (state, action) => {\n      if (action.payload) {\n        const user = jwtDecode(action.payload); //i think the action payload generates token\n\n        return { ...state,\n          token: action.payload,\n          name: user.name,\n          email: user.email,\n          _id: user._id,\n          getUserStatus: \"success\"\n        };\n      } else return state;\n    });\n    builder.addCase(getUser.rejected, (state, action) => {\n      return { ...state,\n        getUserStatus: \"rejected\",\n        getUserError: action.payload\n      };\n    });\n  }\n} //accepting object\n);\nexport const {\n  loadUser,\n  logoutUser\n} = authSlice.actions;\nexport default authSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","url","setHeaders","jwtDecode","initialState","token","localStorage","getItem","name","email","_id","registerStatus","registerError","loginStatus","loginError","userLoaded","registerUser","values","rejectWithValue","post","password","setItem","data","err","console","log","response","loginUser","getUser","id","get","error","authSlice","reducers","loadUser","state","action","user","logoutUser","removeItem","extraReducers","builder","addCase","pending","fulfilled","payload","rejected","getUserStatus","getUserError","actions","reducer"],"sources":["/Users/lilosivert/Downloads/Code/React-Development/Online-Shop/Front-End/src/features/authSlice.js"],"sourcesContent":["import {createSlice, createAsyncThunk} from \"@reduxjs/toolkit\";\nimport axios from \"axios\"\nimport { url, setHeaders } from \"./api\";\nimport jwtDecode from \"jwt-decode\"\n\nconst initialState = {\n    token: localStorage.getItem(\"token\"),//check local storage for token, buitl in JS object\n    name: \"\",\n    email: \"\",\n    _id: \"\",\n    registerStatus: \"\",//pending, fullfilled, or reject\n    registerError: \"\",\n    loginStatus: \"\",\n    loginError: \"\",\n    userLoaded: false,\n};\n\n//action creator --> performs http request to backend, register user, get back token, then should be avaialble to action.payload, in case error you also add to pay;oad\nexport const registerUser = createAsyncThunk(\n    \"auth/registerUser\",\n    async (values, {rejectWithValue}) => {\n        try{//handle error, http request a call to backend\n            const token = await axios.post(`${url}/register`, {\n                name: values.name,\n                email: values.email,\n                password: values.password,\n            });\n\n            localStorage.setItem(\"token\", token.data);\n\n            return token.data;\n        }\n        catch(err) {\n            console.log(err.response.data);\n            return rejectWithValue(err.response.data);\n        }\n\n    }\n);\n\nexport const loginUser = createAsyncThunk(\n    \"auth/loginUser\", //name is for dispatched action\n    async (values, {rejectWithValue}) => {\n        try{//handle error, http request a call to backend \n            const token = await axios.post(`${url}/login`, { //<-- http request \n                email: values.email,\n                password: values.password,\n            });\n\n            localStorage.setItem(\"token\", token.data);\n\n            return token.data;\n        }\n        catch(err) {\n            console.log(err.response);\n            return rejectWithValue(err.response.data);\n        }\n\n    }\n);\n\nexport const getUser = createAsyncThunk(\n    \"auth/getUser\",\n    async (id, { rejectWithValue }) => {\n      try {\n        const token = await axios.get(`${url}/user/${id}`, setHeaders());\n  \n        localStorage.setItem(\"token\", token.data);\n  \n        return token.data;\n      } catch (error) {\n        console.log(error.response);\n        return rejectWithValue(error.response.data);\n      }\n    }\n  );\n\n\nconst authSlice = createSlice(\n    {\n        name: \"auth\",\n        initialState,\n        reducers: {\n            loadUser(state, action){\n                const token = state.token //state has token bc can get from local storage\n\n                if(token){\n                    const user = jwtDecode(token)\n                    return {\n                        ...state,\n                        token,\n                        name: user.name,\n                        email: user.email,\n                        _id: user._id,\n                        userLoaded: true,\n                    };\n                } else return {...state, userLoaded: true}\n            },\n            logoutUser(state, action){\n                localStorage.removeItem(\"token\")\n\n                return {\n                    ...state,\n                    token: \"\",\n                    name: \"\",\n                    email: \"\",\n                    _id: \"\",\n                    registerStatus: \"\",//pending, fullfilled, or reject\n                    registerError: \"\",\n                    loginStatus: \"\",\n                    loginError: \"\",\n                    userLoaded: false,\n                };\n            },\n        }, //we will be creating reducer and action will automatically created by redux toolkit\n        extraReducers: (builder) => {\n            builder.addCase(registerUser.pending, (state, action) => {\n                return { ...state, registerStatus: \"pending\"};\n            });\n            builder.addCase(registerUser.fulfilled, (state, action) => {\n                if(action.payload){\n                    const user = jwtDecode(action.payload);\n\n                    return{\n                        ...state,\n                        token: action.payload,\n                        name: user.name,\n                        email: user.email,\n                        _id: user._id,\n                        registerStatus: \"success\"\n                    };\n                }\n                else return state;\n            });\n            builder.addCase(registerUser.rejected, (state, action) => {\n                return {\n                    ...state,\n                    registerStatus: \"rejected\",\n                    registerError: action.payload\n                };\n            });\n\n\n            builder.addCase(loginUser.pending, (state, action) => {\n                return { ...state, registerStatus: \"pending\"};\n            });\n            builder.addCase(loginUser.fulfilled, (state, action) => {\n                if(action.payload){\n                    const user = jwtDecode(action.payload);\n\n                    return{\n                        ...state,\n                        token: action.payload,\n                        name: user.name,\n                        email: user.email,\n                        _id: user._id,\n                        registerStatus: \"success\"\n                    };\n                }\n                else return state;\n            });\n            builder.addCase(loginUser.rejected, (state, action) => {\n                return {\n                    ...state,\n                    loginStatus: \"rejected\",\n                    loginError: action.payload\n                };\n            });\n\n\n            builder.addCase(getUser.pending, (state,action) => {\n                return {\n                    ...state,\n                    getUserStatus: \"pending\",\n                };\n            });\n            builder.addCase(getUser.fulfilled, (state, action) => {\n                if(action.payload) {\n                    const user = jwtDecode(action.payload) //i think the action payload generates token\n                    return {\n                        ...state,\n                        token: action.payload,\n                        name: user.name,\n                        email: user.email,\n                        _id: user._id,\n                        getUserStatus: \"success\",\n                    };\n                } else return state;\n            });\n            builder.addCase(getUser.rejected, (state,action) => {\n                return {\n                    ...state,\n                    getUserStatus: \"rejected\",\n                    getUserError: action.payload,\n                };\n            });\n        },\n    }//accepting object\n);\n\nexport const {loadUser, logoutUser} = authSlice.actions\n\nexport default authSlice.reducer"],"mappings":"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"},"metadata":{},"sourceType":"module"}